---
title: "2. Creating response variable"
author: "Rilquer Mascarenhas"
format: html
editor: visual
---

> #### Steps
>
> 2.1 Calculating D~a~
> 2.2 Visualizing D~a~ in space
>
> #### Packages utilized
>
> `tidyverse`,`rentrez`,`parallel`,`tidygeocoder`, `sf`,`raster`,`rnaturalearth`,`ggspatial`

------------------------------------------------------------------------

## 2.1 Calculating D~a~

In order to calculate D~a~, we will utilize the information contained in `aln_info`. We will 1) perform an alignment of the fasta sequences; 2) calculate D~XY~ and $\pi$ from each alignment, which will be used for D~a~ calculation; 3) 

Now we re-align...

```{r message=FALSE,warning=FALSE}
dir.create('data/muscle_aln_da/')
aln_da <- vector('list',length(aln_info_da))

require(muscle)
for (i in 1:length(aln_info_da)) {
  aln_da[[i]] <- muscle(DNAStringSet(aln_info_da[[i]]$fasta,use.names = TRUE))
  rownames(aln_da[[i]]) <- aln_info_da[[i]]$accession
  dir.create(paste0('data/muscle_aln_da/',file[i]))
  alignment2Fasta(aln_da[[i]],paste0('data/muscle_aln_da/',file[i],'/',file[i],'_aln.fasta'))
}
```

...and calculate `DXY` and $\pi$ to be used for `Da` calculation. Here, we check for and skip alignments with only one locality, to avoid errors when calculating $\pi$.

```{r message=FALSE,warning=FALSE}
require(PopGenome)
# Calculating Dxy
dxy_calc <- vector('list',length(aln_info_da))
for (i in 1:length(aln_info_da)) {
  if ((length(unique(aln_info_da[[i]]$pops))>1) & i != 19) {
    # Also skipping Pseudopipra pipra because of an error when trying to run PopGenome
    
    pops_list <- aln_info_da[[i]] %>% 
      dplyr::select(pops, accession) %>% 
      group_split(pops) %>% 
      map(pull, accession)
    
    dxy_calc[[i]] <- readData(paste0('data/muscle_aln_da/',file[i],'/'),
                              populations = pops_list) %>% 
      diversity.stats.between()
  }
}

within_calc <- vector('list',length(aln_info_da))

# Calculating pi
for (i in 1:length(aln_info_da)) {
  if ((length(unique(aln_info_da[[i]]$pops))>1) & i != 19) {
    # Also skipping Pseudopipra pipra because of an error when trying to run PopGenome
    
    pops_list <- aln_info_da[[i]] %>% 
      dplyr::select(pops, accession) %>% 
      group_split(pops) %>% 
      map(pull, accession)
    
    within_calc[[i]] <- readData(paste0('data/muscle_aln_da/',file[i],'/'),
                              populations = pops_list) %>% 
      diversity.stats(pi=TRUE)
  }
}

# Calculating avg pi for each pair of pop and collapsing to vector
#pi <- sapply(1:length(within_calc),function(y){return(avg.pi(within_calc[[y]]@nuc.diversity.within))})
```

We now create an object to store all data we will use for Random Forest analyses (`rfdata`), and add a column for `Da` by subtracting `avg.pi` from `Dxy`:

```{r}
rfdata <- c()
for (i in 1:length(dxy_calc)) {
  # Checking and skipping NULL slot for Pseudopipra pipra
  if (!(is.null(dxy_calc[[i]]))) {
    dxy <- as.vector(dxy_calc[[i]]@nuc.diversity.between)
    pi <- as.vector(avg.pi(within_calc[[i]]@nuc.diversity.within))
    otu <- rep(unique(aln_info_da[[i]]$otu),length(dxy))
    locus <- rep(unique(aln_info_da[[i]]$locus),length(dxy))
    alignment <- rep(paste0(unique(aln_info_da[[i]]$otu),' - ',unique(aln_info_da[[i]]$locus)),
                     length(dxy))
    loc_ind <- t(combn(1:nrow(aln_loc_da[[i]]),2))
    colnames(loc_ind) <- c('pop1','pop2')
    long1 <- c()
    lat1 <- c()
    long2 <- c()
    lat2 <- c()
    for (j in 1:nrow(loc_ind)) {
      long1 <- c(long1,aln_loc_da[[i]]$longitude[loc_ind[j,1]])
      lat1 <- c(lat1,aln_loc_da[[i]]$latitude[loc_ind[j,1]])
      long2 <- c(long2,aln_loc_da[[i]]$longitude[loc_ind[j,2]])
      lat2 <- c(lat2,aln_loc_da[[i]]$latitude[loc_ind[j,2]])
    }
    rfdata <- rbind(rfdata,data.frame(otu,locus,alignment,loc_ind,long1,lat1,long2,lat2,dxy,pi))
  }
}
# Calculating Da
rfdata <- tibble(rfdata) %>% mutate(da = dxy-pi)
```

Plotting localities from `rfdata`(Fig. 1A):

```{r}
#localities_da <- do.call(rbind.data.frame,aln_loc_da)

require(rnaturalearth)
world <- ne_countries(scale = "medium", returnclass = "sf")
library(ggspatial)
theme_set(theme_bw()) #Setting theme
ggplot(data = world) +
  geom_sf(fill= "ghostwhite", size = 0.1)+
  annotation_scale(location = "br", width_hint = 0.5) +
  annotation_north_arrow(location = "br", which_north = "true",
                         pad_x = unit(0.3, "in"), pad_y = unit(0.5, "in"),
                         style = north_arrow_fancy_orienteering) +
  geom_sf(data = af_shapefile)+
  geom_sf(data = af_rivers, size = 0.8, color = 'blue')+
  geom_point(data = localities_da, aes(x = longitude,
                                           y = latitude), size = 1, color = 'black')+
  
  coord_sf(xlim = c(study_area[1],study_area[2]),
           ylim = c(study_area[3],study_area[4]), expand = FALSE)+
  scale_x_discrete(name = "Longitude")+
  scale_y_discrete(name = "Latitude")+
  theme(panel.grid.major = element_line(color = gray(.9), linetype = "dashed", size = 0),
        panel.background = element_rect(fill = "aliceblue"),
        axis.text = element_text(size=17),
        axis.title = element_text(size=22))
ggsave('data/response_variable/figures/localities_da.png',
       width = 15, height = 10, dpi = 600)
```

Visualizing range D~a~ values - Figure S1:

```{r}
ggplot(data = rfdata %>% filter(otu != 'Phylloscartes ventralis'),aes(x = otu,y=da,fill=locus))+geom_boxplot()+
  theme(axis.text.x = element_text(angle = 70, hjust = 1))+
  scale_fill_discrete(labels = c('Control Region','CytB','ND2'))+
  labs(x = 'Species',y=bquote(D[a]),fill='Locus')
ggsave('data/response_variable/figures/da_values/range_da_per_spp.png',
       width = 12, height = 6, dpi = 1200)
```

## 2.2 Visualizing D~a~ in space

In order to map D~a~ values, we will retrieve the geographic coordinates of the midpoint between the localities by using a friction surface based on a raster where all cells have equal values. This basically means we are just looking for the shortest path between two localities. To make that raster, we will just use an elevation raster as template and modify the values. We will also restrict all calculations geographically by masking our raster with a buffer polygon based on the localities.

Create buffered polygon:

```{r}
require(sf)
require(raster)
# Creating buffer polygon based on new localities
buf <- rgeos::gBuffer(sp::SpatialPoints(data.frame(rfdata$long1,
                                                   rfdata$lat1)),
               width = 3)
buf <- sf::st_as_sf(buf)
st_crs(buf) <- study_crs
buf <- st_transform(buf)
ggplot()+geom_sf(data = buf)+
  geom_point(data = rfdata, aes(x = long1,
                                           y = lat1), size = 1, color = 'black')
```

We make a transition matrix to calculate shortest path:

```{r}
elevation <- raster('data/spatial/raster/wc2.1_2.5m_elev/wc2.1_2.5m_elev.tif')
elevation <- crop(raster::mask(elevation,as_Spatial(buf)),extent(study_area))
georaster <- elevation
raster::values(georaster)[(!(is.na(raster::values(georaster))))] <- 1
tr_geo <- georaster %>%
  gdistance::transition(mean, directions = 8) %>% #create a transition matrix
  gdistance::geoCorrection("c") #correct for geographic distortion
```

We use function `shortestPath` from the `gdistance` package to get a midpoint per row in `rf_data`.

```{r warning=FALSE, message=FALSE, results='hide', eval = FALSE}
midpoint <- c()
for (i in 1:nrow(rfdata)) {
  coords <- rfdata %>% dplyr::slice(i) %>% dplyr::select(long1,lat1,long2,lat2)
  line <- gdistance::shortestPath(tr_geo,
                                  SpatialPoints(coords[1,1:2]),
                                  SpatialPoints(coords[1,3:4]),
                                  output='SpatialLines')

  # This code should repeat for all alignments, so it matches rfdata
  line <- as.matrix(line@lines[[1]]@Lines[[1]]@coords)
  midrow <- as.integer(nrow(line)/2)
  midpoint <- rbind(midpoint,data.frame(mid_long = as.numeric(line[midrow,1]),
                                        mid_lat = as.numeric(line[midrow,2])))
}
rfdata <- tibble(rfdata,midpoint)
```

Code to check if midpoints are falling where expected:

```{r}
require(viridis)
i=20
sp <- rep(unique(aln_info_da[[i]]$otu,length(dxy)))
lc <- rep(unique(aln_info_da[[i]]$locus,length(dxy)))
plotdata <- rfdata %>% filter(otu == sp & locus == lc)
ggplot()+geom_sf(data = buf) +
  geom_point(data = aln_loc_da[[i]],aes(x = longitude,
                                        y = latitude),
             color = 'black',alpha=0.2)+
  geom_point(data = arrange(plotdata,dxy),aes(x = mid_long,
                                              y = mid_lat,
                                              color = dxy),
             alpha = 0.8)+
  scale_color_viridis()+
  ggtitle(bquote(paste(italic(.(sp)),' - ',.(lc),sep='')))
```